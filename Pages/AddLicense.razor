@page "/default.aspx/addlicense"
@using lms.Validaitions;
@using lms.Workers;
@using lms.Models;
@using Newtonsoft.Json;
@using System.Net.Http;
@using System.Net;
@using System.Net.Http.Headers;
@inject IJSRuntime jsRun

<h3 class="heading1">Add License</h3>
<fieldset class="fieldset">
    <legend>License Information</legend>
    <EditForm Model="@license" OnValidSubmit="@(async () => await HandleValidationAsync())" OnInvalidSubmit="@(async () => await HandleInValidationAsync())">
        <DataAnnotationsValidator />
        <div class="form-row">
            <div class="form-group col-lg-6 col-md-6 col-sm-12">
                <label>System Name <code>*</code></label>
                <InputText class="form-control" @bind-Value="license.SystemName" />
                <ValidationMessage For="@(() => license.SystemName)" />
            </div>
            <div class="form-group col-lg-6 col-md-6 col-sm-12">
                <label>License Name <code>*</code></label>
                <InputText class="form-control" @bind-Value="license.LicenseName" />
                <ValidationMessage For="@(() => license.LicenseName)" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-lg-8 col-md-8 col-sm-12">
                <label>Description</label>
                <InputTextArea class="form-control" @bind-Value="license.Description" />
                <ValidationMessage For="@(() => license.Description)" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-lg-8 col-md-8 col-sm-12">
                <label>License Key <code>*</code></label>
                <InputText class="form-control" @bind-Value="license.LicenseKey" />
                <ValidationMessage For="@(() => license.LicenseKey)" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-lg-6 col-md-6 col-sm-12">
                <label>Owner Name <code>*</code></label>
                <PeoplePicker @ref="peoplePicker" />
            </div>
            <div class="form-group col-lg-6 col-md-6 col-sm-12">
                <label>Contract Number <code>*</code></label>
                <InputText class="form-control" @bind-Value="license.ContractNumber" />
                <ValidationMessage For="@(() => license.ContractNumber)" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-lg-3 col-md-3 col-sm-12">
                <label>Start Date <code>*</code></label>
                <InputDate class="form-control" @bind-Value="license.StartDate" />
                <ValidationMessage For="@(() => license.StartDate)" />
            </div>
            <div class="form-group col-lg-3 col-md-3 col-sm-12">
                <label>End Date <code>*</code></label>
                <InputDate class="form-control" @bind-Value="license.EndDate" />
                <ValidationMessage For="@(() => license.EndDate)" />
            </div>
            <div class="form-group col-lg-3 col-md-3 col-sm-12">
                <label>Issued Date <code>*</code></label>
                <InputDate class="form-control" @bind-Value="license.IssuedDate" />
                <ValidationMessage For="@(() => license.IssuedDate)" />
            </div>
            <div class="form-group col-lg-3 col-md-3 col-sm-12">
                <label>Planned Renewal Date <code>*</code></label>
                <InputDate class="form-control" @bind-Value="license.PlannedRenewal" />
                <ValidationMessage For="@(() => license.PlannedRenewal)" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-lg-3 col-md-3 col-sm-12">
                <label>Quantity <code>*</code></label>
                <InputNumber class="form-control" @bind-Value="license.Quantity" />
                <ValidationMessage For="@(() => license.Quantity)" />
            </div>
            <div class="form-group col-lg-3 col-md-3 col-sm-12">
                <label>Utilized <code>*</code></label>
                <InputNumber class="form-control" @bind-Value="license.Utilized" />
                <ValidationMessage For="@(() => license.Utilized)" />
            </div>
            <div class="form-group col-lg-3 col-md-3 col-sm-12">
                <label>Cost <code>*</code></label>
                <InputNumber class="form-control" @bind-Value="license.Cost" />
                <ValidationMessage For="@(() => license.Cost)" />
            </div>
            <div class="form-group col-lg-3 col-md-3 col-sm-12">
                <label>Type Of Cost <code>*</code></label>
                <InputSelect class="form-control" @bind-Value="license.TypeOfCost">
                    <option value="Yearly" selected>Yearly</option>
                    <option value="Monthly">Monthly</option>
                </InputSelect>
                <ValidationMessage For="@(() => license.TypeOfCost)" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-lg-6 col-md-6 col-sm-12">
                <label>License Attachment</label>
                <div class="custom-file">
                    <input type="file" class="custom-file-input" id="license" multiple="multiple">
                    <label class="custom-file-label" for="license">Choose file</label>
                </div>
            </div>
        </div>
        <button class="button blue" type="submit">Submit</button>
        <NavLink class="button orange" href="default.aspx">Back</NavLink>
    </EditForm>
</fieldset>
@code {
    private LicenseValidation license = new LicenseValidation();
    private PeoplePicker peoplePicker = new PeoplePicker();
    private InputFileUpload inputFileUpload = new InputFileUpload();
    private string result;
    private Root root { get; set; }

    private async Task HandleInValidationAsync()
    {
        //Do something for once, god damit!
    }

    private async Task HandleValidationAsync()
    {
        //Handle Validations which you can't handle normally.

        await SubmitAsync();
    }


    private async Task SubmitAsync()
    {
        HttpClient Http = new HttpClient();
        Http.DefaultRequestHeaders.Add("Accept", "application/json");
        Http.DefaultRequestHeaders.Add("X-RequestDigest", await LMSTools.GetDigestAsync(Navigator.BaseUri));
        Item data = new Item();
        Metadata metadata = new Metadata();
        metadata.Type = Settings.LicensesListType;
        data.Metadata = metadata;
        data.SystemName = license.SystemName;
        data.LicenseName = license.LicenseName;
        data.LicenseKey = license.LicenseKey;
        data.Description = license.Description;
        data.OwnerId = peoplePicker.GetValue();
        data.ContractNumber = license.ContractNumber;
        data.StartDate = license.StartDate;
        data.EndDate = license.EndDate;
        data.IssuedDate = license.IssuedDate;
        data.PlannedRenewal = license.PlannedRenewal;
        data.Quantity = license.Quantity;
        data.Utilized = license.Utilized;
        data.Cost = license.Cost;
        data.TotalCost = license.Quantity * license.Cost;
        data.TypeOfCost = license.TypeOfCost;

        var myContent = JsonConvert.SerializeObject(data);
        var buffer = System.Text.Encoding.UTF8.GetBytes(myContent);
        var byteContent = new ByteArrayContent(buffer);
        var mediaType = new MediaTypeWithQualityHeaderValue("application/json");
        MediaTypeWithQualityHeaderValue.TryParse("application/json;odata=verbose", out mediaType);
        byteContent.Headers.ContentType = mediaType;
        var response = await Http.PostAsync(Navigator.BaseUri + Settings.BaseURL + "_api/web/lists(guid'" + Settings.LicensesListGuid + "')/items", byteContent);
        if (response.StatusCode == HttpStatusCode.Created)
        {
            root = JsonConvert.DeserializeObject<Root>(await response.Content.ReadAsStringAsync());
            await SetLicenseIdAsync(root.Id);
            await UploadAsync(root.Id);
        }
    }

    private async Task SetLicenseIdAsync(int id)
    {
        string lid = LMSTools.GenerateLicenseId(id);
        HttpClient Http = new HttpClient();
        Http.DefaultRequestHeaders.Add("Accept", "application/json");
        Http.DefaultRequestHeaders.Add("X-RequestDigest", await LMSTools.GetDigestAsync(Navigator.BaseUri));
        Http.DefaultRequestHeaders.Add("IF-MATCH", "*");
        Http.DefaultRequestHeaders.Add("X-HTTP-Method", "MERGE");
        Item data = new Item();
        Metadata metadata = new Metadata();
        metadata.Type = Settings.LicensesListType;
        data.Metadata = metadata;
        data.Title = lid;
        var myContent = JsonConvert.SerializeObject(data);
        var buffer = System.Text.Encoding.UTF8.GetBytes(myContent);
        var byteContent = new ByteArrayContent(buffer);
        var mediaType = new MediaTypeWithQualityHeaderValue("application/json");
        MediaTypeWithQualityHeaderValue.TryParse("application/json;odata=verbose", out mediaType);
        byteContent.Headers.ContentType = mediaType;
        var response = await Http.PostAsync(Navigator.BaseUri + Settings.BaseURL + "_api/web/lists(guid'" + Settings.LicensesListGuid + "')/items('" + id + "')", byteContent);
        if (response.StatusCode == HttpStatusCode.NoContent)
        {
            Console.WriteLine("Done!, Your License ID is: " + lid);
        }
        else
        {
            result = "Filed to Update Title, Your Input Json: ";
            Console.WriteLine(result + " : " + JsonConvert.SerializeObject(data));
        }
    }

    private async Task UploadAsync(int id)
    {
        Upload data = new Upload()
        {
            controlId = "license",
            url = Navigator.BaseUri + Settings.BaseURL,
            listGuidMain = Settings.LicensesListGuid,
            itemId = id,
            digest = await LMSTools.GetDigestAsync(Navigator.BaseUri)
        };
        bool x = await jsRun.InvokeAsync<bool>("fileUpload", data);
    }
}