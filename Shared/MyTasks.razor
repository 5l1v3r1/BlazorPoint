@using Microsoft.JSInterop;
@using Newtonsoft.Json;
@using System.Net.Http;
@using Models;
@inject IJSRuntime jsRun

<div class="col-lg-12">
    <table id="MyTasksTable" class="table dataTable table-striped table-bordered" cellspacing="0" width="100%">
        <thead>
            <tr>
                <th>#</th>
                <th>Task</th>
                <th>Description</th>
                <th>Assigned Date</th>
                <th>Priority</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @if (values != null)
            {
                foreach (var task in values)
                {
                    <tr>
                        <td>@task.Id</td>
                        <td>@task.Title</td>
                        <td>
                            <a href="@Navigator.BaseUri/@task.Body">Task Link</a>
                        </td>
                        <td>@task.Created</td>
                        <td>@task.Priority</td>
                        <td>@task.Status</td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <br />
</div>
@code {
    [Parameter]
    public string filter { get; set; } = "Not Started";
    private Root root = new Root();
    private List<Value> values = new List<Value>();

    protected override async Task OnInitializedAsync()
    {
        bool x = await jsRun.InvokeAsync<bool>("dataTableDestroy");
        root = null;
        await GetMyTasksAsync(filter);
        bool y = await jsRun.InvokeAsync<bool>("dataTableCreate");
    }

     protected override async Task OnParametersSetAsync()
    {
        bool x = await jsRun.InvokeAsync<bool>("dataTableDestroy");
        root = null;
        await GetMyTasksAsync(filter);
        bool y = await jsRun.InvokeAsync<bool>("dataTableCreate");
    }

    private async Task GetMyTasksAsync(string status)
    {
        string response = string.Empty;
        HttpClient Http = new HttpClient();
        string uid = Settings.Id.ToString();
        Http.DefaultRequestHeaders.Add("Accept", "application/json");
        response = await Http.GetStringAsync(Navigator.BaseUri+Settings.BaseURL + "_api/web/lists(guid'" + Settings.TasksListGuid + "')/items?$select=*,AssignedTo/Title&$expand=AssignedTo&$filter=AssignedToId eq '" + uid + "' and Status eq '" + status + "'&$orderby=ID desc");
        root = JsonConvert.DeserializeObject<Root>(response);
        values = root.value;
        StateHasChanged();
    }

    public async Task OnReload()
    {
        bool x = await jsRun.InvokeAsync<bool>("dataTableDestroy");
        root = null;
        await GetMyTasksAsync(filter);
        bool y = await jsRun.InvokeAsync<bool>("dataTableCreate");
    }
}
