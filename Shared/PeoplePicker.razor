@using lms.Models;
@using lms.Workers;
@using Newtonsoft.Json;
@using System.Net.Http;

<div class="input-group mb-3">
    <input type="hidden" @bind="@id" />
    <input type="text" class="form-control @validation" @bind="@name" />
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" @onclick="@(async () => await getUserListAsync())">Check</button>
    </div>
</div>

@code{
    string name { get; set; } = "";
    private int id = 0;
    string loginName = "";
    private Root root { get; set; }
    private string digest { get; set; } = "";
    string validation { get; set; } = "";

    private async Task getUserListAsync()
    {


        if (name != "")
        {
            HttpClient Http = new HttpClient();
            string url = Navigator.BaseUri + Settings.BaseURL;
            Http.DefaultRequestHeaders.Add("Accept", "application/json");
            Http.DefaultRequestHeaders.Add("X-RequestDigest", await LMSTools.GetDigestAsync(Navigator.BaseUri));
            var response = await Http.PostAsync(url + "_api/web/ensureuser('" + name + "')", null);
            if ((int)response.StatusCode == 200)
            {
                root = JsonConvert.DeserializeObject<Root>(await response.Content.ReadAsStringAsync());
                id = root.Id;
                loginName = root.LoginName;
                name = root.Title;
                CalculateValidation();
            }
            else
            {
                id = 0;
                loginName = "";
                name = "";
                CalculateValidation();
            }
        }
        StateHasChanged();
    }

    public int GetValue()
    {
        return id;
    }
    public string GetName()
    {
        return loginName;
    }

    public void CalculateValidation()
    {
        if (id > 0)
        {
            validation = "is-valid";
        }
        else
        {
            validation = "is-invalid";
        }
        StateHasChanged();
    }
}
