#pragma checksum "C:\Users\smj\source\repos\lms\Pages\AddLicense.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c662614babb4610bc09a1fc58a3ee0d74ef959da"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace lms.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#line 2 "C:\Users\smj\source\repos\lms\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#line 3 "C:\Users\smj\source\repos\lms\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#line 4 "C:\Users\smj\source\repos\lms\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#line 5 "C:\Users\smj\source\repos\lms\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#line 6 "C:\Users\smj\source\repos\lms\_Imports.razor"
using lms;

#line default
#line hidden
#line 7 "C:\Users\smj\source\repos\lms\_Imports.razor"
using lms.Shared;

#line default
#line hidden
#line 8 "C:\Users\smj\source\repos\lms\_Imports.razor"
using lms.Constants;

#line default
#line hidden
#line 2 "C:\Users\smj\source\repos\lms\Pages\AddLicense.razor"
using lms.Validaitions;

#line default
#line hidden
#line 3 "C:\Users\smj\source\repos\lms\Pages\AddLicense.razor"
using lms.Workers;

#line default
#line hidden
#line 4 "C:\Users\smj\source\repos\lms\Pages\AddLicense.razor"
using lms.Models;

#line default
#line hidden
#line 5 "C:\Users\smj\source\repos\lms\Pages\AddLicense.razor"
using Newtonsoft.Json;

#line default
#line hidden
#line 6 "C:\Users\smj\source\repos\lms\Pages\AddLicense.razor"
using System.Net.Http;

#line default
#line hidden
#line 7 "C:\Users\smj\source\repos\lms\Pages\AddLicense.razor"
using System.Net;

#line default
#line hidden
#line 8 "C:\Users\smj\source\repos\lms\Pages\AddLicense.razor"
using System.Net.Http.Headers;

#line default
#line hidden
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(MainLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/default.aspx/addlicense")]
    public class AddLicense : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#line 113 "C:\Users\smj\source\repos\lms\Pages\AddLicense.razor"
       
    private LicenseValidation license = new LicenseValidation();
    private PeoplePicker peoplePicker = new PeoplePicker();
    private InputFileUpload inputFileUpload = new InputFileUpload();
    private string result;
    private Root root { get; set; }

    private async Task HandleInValidationAsync()
    {
        //Do something for once, god damit!
    }

    private async Task HandleValidationAsync()
    {
        //Handle Validations which you can't handle normally.

        await SubmitAsync();
    }


    private async Task SubmitAsync()
    {
        HttpClient Http = new HttpClient();
        Http.DefaultRequestHeaders.Add("Accept", "application/json");
        Http.DefaultRequestHeaders.Add("X-RequestDigest", await LMSTools.GetDigestAsync(Navigator.BaseUri));
        Item data = new Item();
        Metadata metadata = new Metadata();
        metadata.Type = Settings.LicensesListType;
        data.Metadata = metadata;
        data.SystemName = license.SystemName;
        data.LicenseName = license.LicenseName;
        data.LicenseKey = license.LicenseKey;
        data.Description = license.Description;
        data.OwnerId = peoplePicker.GetValue();
        data.ContractNumber = license.ContractNumber;
        data.StartDate = license.StartDate;
        data.EndDate = license.EndDate;
        data.IssuedDate = license.IssuedDate;
        data.PlannedRenewal = license.PlannedRenewal;
        data.Quantity = license.Quantity;
        data.Utilized = license.Utilized;
        data.Cost = license.Cost;
        data.TotalCost = license.Quantity * license.Cost;
        data.TypeOfCost = license.TypeOfCost;

        var myContent = JsonConvert.SerializeObject(data);
        var buffer = System.Text.Encoding.UTF8.GetBytes(myContent);
        var byteContent = new ByteArrayContent(buffer);
        var mediaType = new MediaTypeWithQualityHeaderValue("application/json");
        MediaTypeWithQualityHeaderValue.TryParse("application/json;odata=verbose", out mediaType);
        byteContent.Headers.ContentType = mediaType;
        var response = await Http.PostAsync(Navigator.BaseUri + Settings.BaseURL + "_api/web/lists(guid'" + Settings.LicensesListGuid + "')/items", byteContent);
        if (response.StatusCode == HttpStatusCode.Created)
        {
            root = JsonConvert.DeserializeObject<Root>(await response.Content.ReadAsStringAsync());
            await SetLicenseIdAsync(root.Id);
            await UploadAsync(root.Id);
        }
    }

    private async Task SetLicenseIdAsync(int id)
    {
        string lid = LMSTools.GenerateLicenseId(id);
        HttpClient Http = new HttpClient();
        Http.DefaultRequestHeaders.Add("Accept", "application/json");
        Http.DefaultRequestHeaders.Add("X-RequestDigest", await LMSTools.GetDigestAsync(Navigator.BaseUri));
        Http.DefaultRequestHeaders.Add("IF-MATCH", "*");
        Http.DefaultRequestHeaders.Add("X-HTTP-Method", "MERGE");
        Item data = new Item();
        Metadata metadata = new Metadata();
        metadata.Type = Settings.LicensesListType;
        data.Metadata = metadata;
        data.Title = lid;
        var myContent = JsonConvert.SerializeObject(data);
        var buffer = System.Text.Encoding.UTF8.GetBytes(myContent);
        var byteContent = new ByteArrayContent(buffer);
        var mediaType = new MediaTypeWithQualityHeaderValue("application/json");
        MediaTypeWithQualityHeaderValue.TryParse("application/json;odata=verbose", out mediaType);
        byteContent.Headers.ContentType = mediaType;
        var response = await Http.PostAsync(Navigator.BaseUri + Settings.BaseURL + "_api/web/lists(guid'" + Settings.LicensesListGuid + "')/items('" + id + "')", byteContent);
        if (response.StatusCode == HttpStatusCode.NoContent)
        {
            Console.WriteLine("Done!, Your License ID is: " + lid);
        }
        else
        {
            result = "Filed to Update Title, Your Input Json: ";
            Console.WriteLine(result + " : " + JsonConvert.SerializeObject(data));
        }
    }

    private async Task UploadAsync(int id)
    {
        Upload data = new Upload()
        {
            controlId = "license",
            url = Navigator.BaseUri + Settings.BaseURL,
            listGuidMain = Settings.LicensesListGuid,
            itemId = id,
            digest = await LMSTools.GetDigestAsync(Navigator.BaseUri)
        };
        bool x = await jsRun.InvokeAsync<bool>("fileUpload", data);
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsRun { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager Navigator { get; set; }
    }
}
#pragma warning restore 1591
